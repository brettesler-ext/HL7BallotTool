<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ assembly name="Newtonsoft.Json" #>
<#@ import namespace="Newtonsoft.Json" #>
<#@ import namespace="Newtonsoft.Json.Linq" #>
<#@ assembly name="Microsoft.CSharp" #>
<#@ import namespace="Microsoft.CSharp" #>
<#@ output extension=".txt" #>
<#
	// source files 
	string[] filenames = new string[] { "ImplementationGuide-hl7.fhir.au.core.json", "ImplementationGuide-hl7.fhir.au.base.json", "ImplementationGuide-hl7.fhir.au.pd.json", "ImplementationGuide-hl7.fhir.au.ereq.json", "ImplementationGuide-hl7.fhir.au.ps.json" };
	
	string[] changes = new string[] { "ImplementationGuide-hl7.fhir.au.core.change.json", "ImplementationGuide-hl7.fhir.au.base.change.json", "ImplementationGuide-hl7.fhir.au.pd.change.json", "ImplementationGuide-hl7.fhir.au.ereq.change.json", "ImplementationGuide-hl7.fhir.au.ps.change.json" };

	List<string> duplicates = new List<string>();

    string templateFileName = Path.GetFileNameWithoutExtension(this.Host.TemplateFile);

	int i = 0;
    foreach (var filename in filenames)
    {
        string settingsPath = this.Host.ResolvePath(filename);
        string settingsJson = File.ReadAllText(settingsPath);
        dynamic datasource = JObject.Parse(settingsJson);

		string changesPath = this.Host.ResolvePath(changes[i]);
        string changesJson = File.ReadAllText(changesPath);
        dynamic changessource = JObject.Parse(changesJson);

		string canonical = changessource.canonical;
		string ballotUrl = changessource.ballot;
		string defaultv = changessource.defaultver;
		string cibuild = changessource.cibuild;
        #>
<specification xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" ballotUrl="<#= ballotUrl #>" ciUrl="https://build.fhir.org/ig/<#= cibuild #>" defaultVersion="<#= defaultv #>" defaultWorkgroup="au-fhir" gitUrl="https://github.com/<#= cibuild #>" url="<#= canonical #>">
	<version code="current" url="https://build.fhir.org/ig/<#= cibuild #>"/><#
		foreach(var version in changessource.versions)
		{
			string deprecated = "";
			string versionval = version;
			if(versionval.StartsWith("deprecated:"))
			{
				versionval = versionval.Replace("deprecated:", "");
				deprecated = " deprecated=\"true\"";
			}

#>  
    <version code="<#= versionval #>"<#= deprecated #> url="<#= canonical #>/<#= versionval #>"/><# 
		} 
#>	
	<artifactPageExtension value="-definitions"/>
	<artifactPageExtension value="-examples"/>
	<artifactPageExtension value="-mapping"/>
<#
	Dictionary<string, string> changesdict = new Dictionary<string, string>();
    foreach(var changevalue in changessource.change)
	{
		if(changevalue.id == null)
			changesdict.Add(changevalue.key.ToString(), changevalue.name.ToString() );
		else
			changesdict.Add(changevalue.id.ToString(), changevalue.name.ToString() );
	}

	foreach(var rnode in datasource.definition.resource)
	{
		string key = rnode.reference.reference.ToString().Replace("/","-");

		string idval = rnode.reference.reference.ToString();
		string nameval = rnode.name.ToString();
		if(changesdict.ContainsKey(idval))
			nameval = changesdict[idval];

		string duplicated = "";
		if( duplicates.Contains( nameval ) )
			duplicated = "DUPLICATE" ;
		else
			duplicates.Add( nameval );

	#>
	<artifact id="<#= rnode.reference.reference #>" key="<#= key #>" name="<#= nameval #>" <#= duplicated #>/>
<#}
	foreach(var depvalue in changessource.deprecate)
	{
	#>
	<artifact id="<#= depvalue.id #>" key="<#= depvalue.key #>" name="<#= depvalue.name #>" deprecated="true"/>
<#	
	}
#>
	<page key="NA" name="(NA)"/>
	<page key="many" name="(many)"/>
<#
	pages(datasource.definition.page, changesdict);
	
	foreach(var pagedepvalue in changessource.pagedeprecate)
	{
#>
	<page key="<#= pagedepvalue.key #>" name="<#= pagedepvalue.name #>" deprecated="true"/>
<#	
	
	}
#>
</specification>
        <#
		var fname = "FHIR-" + filename.Replace("ImplementationGuide-hl7.fhir.","").Replace(".","-").Replace("-json",".xml");
        save(fname);
		duplicates.Clear();
		i++;
	}
#>
<#+
private void save(string outputFileName) {
  string templateDirectory = Path.GetDirectoryName(Host.TemplateFile);
  string outputFilePath = Path.Combine(templateDirectory, outputFileName);
  File.WriteAllText(outputFilePath, this.GenerationEnvironment.ToString()); 
  this.GenerationEnvironment.Remove(0, this.GenerationEnvironment.Length);
}
#>

<#+
private void pages(dynamic node, Dictionary<string, string> dict) {

	if(node.nameUrl != null)
	{
		string key = node.nameUrl.ToString().Replace(".html","");

		string title = node.title;
		if(dict.ContainsKey(key))
			title = dict[key];

		#>
	<page key="<#= key #>" name="<#= title #>"/>
<#+
	}

	if(node.page == null)
		return;

	foreach(var pnode in node.page)
		pages(pnode, dict);
}
#>